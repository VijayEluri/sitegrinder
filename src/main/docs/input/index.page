page_title=Home

<p>
Stringtree Site Grinder is a tool for managing web sites. 
It aims to eliminate repetitive typing and copy/paste to let you focus on useful and attractive content.
</p>

<h2>Instant Tutorial</h2>

<p>First, lets create a very simple "hello, world" web site, just to demonstrate that Stringtree Site Grinder 
can process a simple page definition</p>
 
<ol>
	<li>Create a new directory for Stringtree Site Grinder tutorials, perhaps named <tt>tutorial</tt></li>
	<li>Create two directories in your tutorial folder named <tt>input</tt> and <tt>output</tt></li>
	<li>Create a file in your <tt>input</tt> directory named <tt>index.page</tt></li>
	<li>Add the following lines to the new <tt>index.page</tt> file:

<br/><br/>

${step='1'}

${filename='index.page'}${filename*tutfile}

Note that there is a blank line between the page title definition and the HTML content of the page. 
This is important, as it allows the system to tell the difference between <i>header</i> lines (which do 
things such as define common values) and the <i>content</i> of a page</li>
</ol>

<p>Now, let's "grind" it using the command-line tool. This is not the only way to use Stringtree Site Grinder, 
but it is a simple way to start.</p>
<ol>
	<li>Open a command prompt in the tutorial directory you created above</li>
	<li>Copy the sitegrinder.jar file into your directory</li>
	<li>Enter <tt>java -jar sitegrinder.jar input output</tt>

<p>A new file <tt>index.html</tt> will appear in the <tt>output</tt> directory. Open the file in a web browser 
to see your new (if minimal) web page with its hello message.</p>

${filename='index.html'}${filename*outfile}

</li>
</ol>

${step='2'}

So far this does not offer any benefits compared with just editing HTML pages, so let's add a little bit of cleverness.

<ol>
	<li>Create a directory under input named <tt>_templates</tt> (the leading underscore ( <b>_</b> ) is important)</li>
	<li>Create two files in the new <tt>_templates</tt> directory:
	
<br/><br/>

${filename='_templates/prologue.tpl'}${filename*tutfile}
${filename='_templates/epilogue.tpl'}${filename*tutfile}

	</li>
	<li>"Grind" the web site as above: <tt>java -jar sitegrinder.jar input output</tt>

<p>The file <tt>index.html</tt> will be re-generated, this time it will automatically pick up the common prologue and epilogue. 
Refresh your web browser to see your updated web page with its page title.</p>

${filename='index.html'}${filename*outfile}

</li>
</ol>
